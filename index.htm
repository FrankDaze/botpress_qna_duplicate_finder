<!doctype html>
<html lang="en" class="scroll-smooth">
<head>
	<meta charset="utf-8">
</head>
<body>
	<style>
		body {
			color: #fff;
			font-family: arial;
			font-size:  11px;
			background-color:  #143d5e;
		} 
		table {
			border:  none;
			border-spacing: 6px;
		}
		td 
		{
			background-color:  #ccc;
			padding:  0px;
			font-size: 13px;
			color: #000;
		}
		.id {
			display:  block;
			padding:  6px;
			background:  #2d76b3;
			color:  #fff;
			font-weight: bold;
			cursor:  pointer;
		}
		.question {
			display:  block;
			padding:  6px;

		}
		#modal {
			position:  absolute;
			width:  200px;
			height:  300px;
			border:  1px solid black;
			background-color:  #ccc;
			display:  block;
			z-index: 100;
			top: 0;
   			left: 0;
		}
		.modalHeader {
			display:  block;
			background-color:  #333;
			font-size: 14px;
			height: 27px;

		}
		.modalHeader .modalClose {
			float: right;
			font-weight: bold;
			cursor: pointer;
			background-color:  #666;
			padding:  5px;
		}
		.modalHeader .modalTitle {
			width: 92%;
		    overflow-x: hidden;
		    display: block;
		    padding:  5px;
		}
		.modalContent {
			display: block;
			color:  #333;
			font-size:  13px;
			height: 91%;
    		overflow-y: scroll;
		}
		.modalContent div {
			padding: 5px;
		}
	</style>
<h1>Botpress QNA Duplicate Finder</h1>
Copyright by Frank Dase (2022)<br/><br/>
<input type="file" id="fileUpload" onchange="getPath(this.files)">

<div id="output"></div>
<div id="modal">
	<div class="modalHeader"><span class="modalClose" onclick="closeModal()">X</span><span class="modalTitle"></span></div>
	<div class="modalContent"></div>
</div>
<script>
	const modal = document.getElementById('modal');
	let questionsArray = [];
	const pickDoublicates = async (json) => {
		const container = document.getElementById("output");
		questionsArray = [];
		const resultsArray = [];
		
		
		let count = 0;

		// convert json to a better readable format
		json.qnas.forEach((item) => {
			
			const questions = [];
			item.data.questions.de.forEach((q) => {
				questions.push(q.toLowerCase());	
			});
			questionsArray.push({"id": item.id, "questions" : questions});
			
		});

		// check data and show result
		let output = "<hr>";
		output += "<h2 id='results'>Results</h2>";
		output +=   "<table >";

		questionsArray.map(item => {
			item.questions.map(question => {
				questionsArray.map(i => {

					const index = i.questions.indexOf(question);

					if(index>-1)
					{
						if(item.id !== i.id)
						{
							// show result only one time
							var index1 = resultsArray.findIndex(e => e.id === item.id && e.question == question);
							var index2 = resultsArray.findIndex(e => e.id === i.id && e.question == i.questions[index]);

							if(index1 === -1 || index2 === -1)
							{
								output += "<tr>";
								output += "<td><div class='id' onclick='openModal(this)' title='show all questions of this ID'>" + item.id + "</div><div class='question'>" + question + "</div></td>";
								output += "<td><div class='id' onclick='openModal(this)'  title='show all questions of this ID'>" + i.id + "</div><div class='question'>" + i.questions[index] + "</div></td>";
								output += "</tr>";
								resultsArray.push({id:item.id, question: question});
								resultsArray.push({id:i.id , question: i.questions[index]});	
								count++;
							}

						}
					
					}
				});
			});
		});
		output += "</table>";
		
		container.innerHTML = output;
		document.getElementById("results").innerHTML = document.getElementById("results").innerHTML + " (" + count + ")";
	}
	const getPath = (file) => {
		// Stop the form from reloading the page
		event.preventDefault();

		// If there's no file, do nothing
		if (!file[0].size) return;
		
		// Create a new FileReader() object
		let reader = new FileReader();

		// Setup the callback event to run when the file is read
		reader.onload = logFile;

		// Read the file
		reader.readAsText(file[0]);
	}
	function logFile (event) {
		let str = event.target.result;
		let json = JSON.parse(str);
		 pickDoublicates(json);
	}
	const openModal = (el) =>
	{   
		modal.style.display = "block";
		const header = modal.getElementsByClassName("modalTitle");
		const modalContent = modal.getElementsByClassName("modalContent");
		const offset = el.getBoundingClientRect();
		
		modal.style.left = parseInt(offset.left)+"px";
		modal.style.top = parseInt(offset.top)+ window.scrollY +"px";
		modal.style.width = offset.width + "px";
		let id = el.innerHTML;
		header[0].innerHTML = el.innerHTML;
		modalContent[0].innerHTML = "";

		questionsArray.map(item => {
			
			if(item.id == id)
			{
				console.log(item.id, id);
				console.log("equal");
				item.questions.map(question => {
					console.log(question);
					modalContent[0].innerHTML += `<div>${question}</div>`;
					
				});
			}
		});
	}
	const closeModal = () => {
		modal.style.display = "none";
	}
	onload = ( ()=> {
		closeModal();
	});
</script>

</body>
</html>