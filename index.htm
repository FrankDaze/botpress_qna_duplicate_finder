<!doctype html>
<html lang="en" class="scroll-smooth">
<head>
	<meta charset="utf-8">
</head>
<body>
	<style>
		body {
			color: #fff;
			font-family: arial;
			font-size:  11px;
			background-color:  #143d5e;
		} 
		table {
			border:  none;
			border-spacing: 6px;
		}
		td 
		{
			background-color:  #ccc;
			padding:  0px;
			font-size: 13px;
			color: #000;
		}
		.id {
			display:  block;
			padding:  6px;
			background:  #2d76b3;
			color:  #fff;
			font-weight: bold;
		}
		.question {
			display:  block;
			padding:  6px;

		}
	</style>
<h1>Botpress QNA Duplicate Finder</h1>
Copyright by Frank Dase (2022)<br/><br/>
<input type="file" id="fileUpload" onchange="getPath(this.files)">

<div id="output"></div>

<script>

	const pickDoublicates = async (json) => {
		const container = document.getElementById("output");
		const questionsArray = [];
		const resultsArray = [];

		// convert json to a better readable format
		json.qnas.forEach((item) => {
			
			const questions = [];
			item.data.questions.de.forEach((q) => {
				questions.push(q.toLowerCase());	
			});
			questionsArray.push({"id": item.id, "questions" : questions});
			
		});

		// check data and show result
		let output = "<hr>";
		output += "<h2>Results</h2>";
		output +=   "<table >";

		questionsArray.map(item => {
			item.questions.map(question => {
				questionsArray.map(i => {

					const index = i.questions.indexOf(question);

					if(index>-1)
					{
						if(item.id !== i.id)
						{
							// show result only one time
							var index1 = resultsArray.findIndex(e => e.id === item.id && e.question == question);
							var index2 = resultsArray.findIndex(e => e.id === i.id && e.question == i.questions[index]);

							if(index1 === -1 && index2 === -1)
							{
								output += "<tr>";
								output += "<td><div class='id'>" + item.id + "</div><div class='question'>" + question + "</div></td>";
								output += "<td><div class='id'>" + i.id + "</div><div class='question'>" + i.questions[index] + "</div></td>";
								output += "</tr>";
								resultsArray.push({id:item.id, question: question});
								resultsArray.push({id:i.id , question: i.questions[index]});	
							}

						}
					
					}
				});
			});
		});
		output += "</table>";
		
		container.innerHTML = output;
		
	}
	const getPath = (file) => {
		// Stop the form from reloading the page
		event.preventDefault();

		// If there's no file, do nothing
		if (!file[0].size) return;
		
		// Create a new FileReader() object
		let reader = new FileReader();

		// Setup the callback event to run when the file is read
		reader.onload = logFile;

		// Read the file
		reader.readAsText(file[0]);
	}
	function logFile (event) {
		let str = event.target.result;
		let json = JSON.parse(str);
		 pickDoublicates(json);
	}
	//readJson();
</script>

</body>
</html>